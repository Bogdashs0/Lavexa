from aiogram import Bot, Dispatcher, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.utils import executor
from aiogram.types import ParseMode
from datetime import datetime, timedelta

API_TOKEN = '7171247065:AAHPQrjEFh-mXv8uqBK7pw_JLjSRMaKsu_Y'

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())

user_balances = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_boosts = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±—É—Å—Ç–∞—Ö
user_last_gift_time = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–∞
user_completed_tasks = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
user_referral_links = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
user_huts = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ö–∏–∂–∏–Ω–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∑–∞–¥–∞–Ω–∏—è–º–∏
def create_tasks_keyboard():
    keyboard_markup = types.InlineKeyboardMarkup(row_width=2)

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∑–∞–¥–∞–Ω–∏–π
    button1 = types.InlineKeyboardButton(
        "üíúLAVE RU",
        url="https://t.me/lavefoundation"
    )
    button2 = types.InlineKeyboardButton(
        "üíúLAVE –ß–∞—Ç",
        url="https://t.me/lavechats"
    )
    button3 = types.InlineKeyboardButton(
        "üíöBARO RU",
        url="https://t.me/barotoken"
    )

    # –ö–Ω–æ–ø–∫–∞ "‚úÖ" –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
    button1_check = types.InlineKeyboardButton("‚úÖ", callback_data='check_task_lave_ru')
    button2_check = types.InlineKeyboardButton("‚úÖ", callback_data='check_task_lave_chat')
    button3_check = types.InlineKeyboardButton("‚úÖ", callback_data='check_task_baro_ru')

    button_back = types.InlineKeyboardButton("‚¨ÖÔ∏è", callback_data='back_to_main_menu')

    keyboard_markup.add(button1, button1_check)
    keyboard_markup.add(button2, button2_check)
    keyboard_markup.add(button3, button3_check)
    keyboard_markup.add(button_back)

    return keyboard_markup


@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    user = await bot.get_chat_member(message.chat.id, message.from_user.id)

    if user.user.username is None:
        await message.answer("‚ùå–ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –±–µ–∑ @username. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.", parse_mode=ParseMode.MARKDOWN)
    else:
        user_id = user.user.id
        if user_id not in user_balances:
            user_balances[user_id] = 0  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in user_boosts:
            user_boosts[user_id] = 1  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—É—Å—Ç–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in user_last_gift_time:
            user_last_gift_time[user_id] = datetime.now() - timedelta(days=1)  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–¥–∞—Ä–∫–∞
        if user_id not in user_completed_tasks:
            user_completed_tasks[user_id] = []  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
        if user_id not in user_referral_links:
            user_referral_links[user_id] = f"t.me/baronclickbot?start={user_id}"
        if user_id not in user_huts:
            user_huts[user_id] = {  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö–∏–∂–∏–Ω—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                'status': 'Full Boost',
                'founder': '@lavefoundation',
                'code': '#LAVE'
            }

        keyboard_markup = types.InlineKeyboardMarkup(row_width=2)
        button1 = types.InlineKeyboardButton("‚öí–ö—É–∑–Ω–∏—Ü–∞", callback_data='forge_button')
        button2 = types.InlineKeyboardButton("üõñ–†—ã–Ω–æ–∫ –ë–∞—Ä–æ–Ω–∞", callback_data='market_button')
        button3 = types.InlineKeyboardButton("üóÇ–ó–∞–¥–∞–Ω–∏—è", callback_data='tasks_button')
        button4 = types.InlineKeyboardButton("ü§ù–†–µ—Ñ–µ—Ä–∞–ª—ã", callback_data='referrals_button')
        button5 = types.InlineKeyboardButton("‚öî–ê—Ä–º–∏—è –ë–∞—Ä–æ–Ω–∞", callback_data='army_button') 
        keyboard_markup.add(button1, button2)
        keyboard_markup.add(button3, button4)
        keyboard_markup.add(button5)

        text = f"üëã–ü—Ä–∏–≤–µ—Ç {user.user.first_name}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Ñ–µ—Ä–º—É –ë–∞—Ä–æ–Ω–∞.\n\n‚öí–ü–æ—Å–µ—Ç–∏ –ö—É–∑–Ω–∏—Ü—É, –ø—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π, —Ä–∞–∑–≤–ª–µ–∫–∞–π—Å—è, –≤ –∫–æ–Ω—Ü–µ —Å–µ–∑–æ–Ω–∞ –ë–∞—Ä–æ–Ω –ø—Ä–æ–≤–µ–¥–µ—Ç —Ä–∞–∑–¥–∞—á—É, –∞ —á—Ç–æ –∏ –∫–æ–º—É –æ–Ω —Ä–∞–∑–¥–∞—Å—Ç - –Ω–∏–∫—Ç–æ –Ω–µ –∑–Ω–∞–µ—Ç. –î–≤–∞ —Å–ø–æ–π–ª–µ—Ä–∞: –£ –ë–∞—Ä–æ–Ω–∞ –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–¥–∫–æ–≤—ã, –∏ –æ–Ω –æ—á–µ–Ω—å –ª—é–±–∏—Ç $BARO.\n–£–≤–∏–¥–∏–º—Å—è –Ω–∞ –ª—É–Ω–µüôÇ‚Äç‚ÜïÔ∏è"
        await message.answer(text, parse_mode=ParseMode.MARKDOWN, reply_markup=keyboard_markup)

@dp.callback_query_handler(lambda query: query.data == 'forge_button')
async def process_forge_button(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    balance = user_balances[user_id]
    boost = user_boosts[user_id]

    text = f"üëã–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π {callback_query.from_user.first_name}, —è –ë–æ, –æ–¥–∏–Ω –∏–∑ –ª—É—á—à–∏—Ö –∫—É–∑–Ω–µ—Ü–æ–≤ –≤–æ –≤—Å–µ–º LAVE VERS.\nüë®‚Äçüè≠–ú–Ω–µ –Ω—É–∂–µ–Ω –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –ø–æ–¥–∫–æ–≤. \nüî•–í—Å–µ –ø—Ä–æ—â–µ –ø—Ä–æ—Å—Ç–æ–≥–æ, –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –ø–æ–¥–∫–æ–≤ —Ç–µ–±–µ –ø—Ä–æ—Å—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–∂–∏–º–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ —Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —Ç–æ, –∫–∞–∫ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è —Ç–≤–æ–π –±–∞–ª–∞–Ω—Å.\n–¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {balance}∆±"

    keyboard_markup = types.InlineKeyboardMarkup(row_width=2)
    button_earn = types.InlineKeyboardButton("∆±", callback_data='earn_button')
    button_back = types.InlineKeyboardButton("‚¨ÖÔ∏è", callback_data='back_to_main_menu')
    keyboard_markup.add(button_earn, button_back)

    await callback_query.message.edit_text(text, parse_mode=ParseMode.MARKDOWN, reply_markup=keyboard_markup)

@dp.callback_query_handler(lambda query: query.data == 'earn_button')
async def process_earn_button(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    user_balances[user_id] += user_boosts[user_id]  # –£—á–∏—Ç—ã–≤–∞–µ–º –±—É—Å—Ç
    balance = user_balances[user_id]

    text = f"üëã–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π {callback_query.from_user.first_name}, —è –ë–æ, –æ–¥–∏–Ω –∏–∑ –ª—É—á—à–∏—Ö –∫—É–∑–Ω–µ—Ü–æ–≤ –≤–æ –≤—Å–µ–º LAVE VERS.\nüë®‚Äçüè≠–ú–Ω–µ –Ω—É–∂–µ–Ω –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –ø–æ–¥–∫–æ–≤. \nüî•–í—Å–µ –ø—Ä–æ—â–µ –ø—Ä–æ—Å—Ç–æ–≥–æ, –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –ø–æ–¥–∫–æ–≤ —Ç–µ–±–µ –ø—Ä–æ—Å—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–∂–∏–º–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ —Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —Ç–æ, –∫–∞–∫ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è —Ç–≤–æ–π –±–∞–ª–∞–Ω—Å.\n–¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {balance}∆±"

    keyboard_markup = types.InlineKeyboardMarkup(row_width=2)
    button_earn = types.InlineKeyboardButton("∆±", callback_data='earn_button')
    button_back = types.InlineKeyboardButton("‚¨ÖÔ∏è", callback_data='back_to_main_menu')
    keyboard_markup.add(button_earn, button_back)

    await callback_query.message.edit_text(text, parse_mode=ParseMode.MARKDOWN, reply_markup=keyboard_markup)

@dp.callback_query_handler(lambda query: query.data == 'back_to_main_menu')
async def process_back_to_main_menu(callback_query: types.CallbackQuery):
    await callback_query.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    await send_welcome(callback_query.message)

@dp.callback_query_handler(lambda query: query.data == 'market_button')
async def process_market_button(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    balance = user_balances[user_id]
    boost = user_boosts[user_id]

    text = "üõñ–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Ä—ã–Ω–æ–∫ –ë–∞—Ä–æ–Ω–∞. –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –∫—É–ø–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏—è, —á—Ç–æ–±—ã –ø–æ–≤—ã—Å–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏–≥—Ä–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞."

    keyboard_markup = types.InlineKeyboardMarkup(row_width=1)

    if boost == 1:  # –ï—Å–ª–∏ –±—É—Å—Ç –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω
        button1 = types.InlineKeyboardButton("‚ö°Ô∏èLAVE Boost| +1∆±| 500∆±", callback_data='buy_lave_boost')
        keyboard_markup.add(button1)

    button2 = types.InlineKeyboardButton("üíúLAVE Starter| +5∆±| üîí", callback_data='buy_lave_starter')
    keyboard_markup.add(button2)

    button3 = types.InlineKeyboardButton("üéÅ | +500∆±", callback_data='get_gift')
    keyboard_markup.add(button3)

    button_back = types.InlineKeyboardButton("‚¨ÖÔ∏è", callback_data='back_to_main_menu')
    keyboard_markup.add(button_back)

    await callback_query.message.edit_text(text, parse_mode=ParseMode.MARKDOWN, reply_markup=keyboard_markup)

@dp.callback_query_handler(lambda query: query.data == 'buy_lave_boost')
async def process_buy_lave_boost(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    if user_balances[user_id] >= 500:
        user_balances[user_id] -= 500
        user_boosts[user_id] = 2  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±—É—Å—Ç +2
        await callback_query.answer("‚ö°Ô∏èLAVE Boost –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –¢–µ–ø–µ—Ä—å —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å +2∆± –∑–∞ –∫–ª–∏–∫.", show_alert=True)
        await process_market_button(callback_query)  # –û–±–Ω–æ–≤–ª—è–µ–º —Ä—ã–Ω–æ–∫
    else:
        await callback_query.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–¥–∫–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ LAVE Boost.", show_alert=True)

@dp.callback_query_handler(lambda query: query.data == 'buy_lave_starter')
async def process_buy_lave_starter(callback_query: types.CallbackQuery):
    await callback_query.answer("–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ", show_alert=True)

@dp.callback_query_handler(lambda query: query.data == 'get_gift')
async def process_get_gift(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    last_gift_time = user_last_gift_time[user_id]
    current_time = datetime.now()
    if current_time - last_gift_time >= timedelta(days=1):
        user_balances[user_id] += 500
        user_last_gift_time[user_id] = current_time
        await callback_query.answer("üéÅ–ü–æ–¥–∞—Ä–æ–∫ –ø–æ–ª—É—á–µ–Ω!", show_alert=True)
        await process_market_button(callback_query)  # –û–±–Ω–æ–≤–ª—è–µ–º —Ä—ã–Ω–æ–∫
    else:
        time_left = timedelta(days=1) - (current_time - last_gift_time)
        await callback_query.answer(f"üéÅ–ü–æ–¥–∞—Ä–æ–∫ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ {time_left.seconds // 3600} —á–∞—Å–æ–≤ {time_left.seconds % 3600 // 60} –º–∏–Ω—É—Ç.", show_alert=True)

@dp.callback_query_handler(lambda query: query.data == 'tasks_button')
async def process_tasks_button(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    completed_tasks = user_completed_tasks[user_id]

    text = "üóÇ–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π:\n\n"
    keyboard_markup = create_tasks_keyboard()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
    if 'check_task_lave_ru' in completed_tasks:
        keyboard_markup.inline_keyboard[0][1].callback_data = 'task_completed'  # –î–µ–ª–∞–µ–º –∫–Ω–æ–ø–∫—É –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π
    if 'check_task_lave_chat' in completed_tasks:
        keyboard_markup.inline_keyboard[1][1].callback_data = 'task_completed'
    if 'check_task_baro_ru' in completed_tasks:
        keyboard_markup.inline_keyboard[2][1].callback_data = 'task_completed'

    await callback_query.message.edit_text(text, parse_mode=ParseMode.MARKDOWN, reply_markup=keyboard_markup)

@dp.callback_query_handler(lambda query: query.data.startswith('check_task_'))
async def process_check_task(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    task_name = callback_query.data.split('_')[-1]
    if task_name not in user_completed_tasks[user_id]:
        user_completed_tasks[user_id].append(task_name)
        user_balances[user_id] += 500  # –ù–∞—á–∏—Å–ª—è–µ–º –ø–æ–¥–∫–æ–≤—ã –∑–∞ –∑–∞–¥–∞–Ω–∏–µ
        await callback_query.answer("‚úÖ–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ —Å–ª–µ–¥—É—é—â–µ–º—É.", show_alert=True)
        await process_tasks_button(callback_query)  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π
    else:
        await callback_query.answer("‚úÖ–ó–∞–¥–∞–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.", show_alert=True)

@dp.callback_query_handler(lambda query: query.data == 'task_completed')
async def process_completed_task(callback_query: types.CallbackQuery):
    await callback_query.answer("‚úÖ–ó–∞–¥–∞–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.", show_alert=True)

@dp.callback_query_handler(lambda query: query.data == 'referrals_button')
async def process_referrals_button(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    referral_link = user_referral_links[user_id]
    text = f"üê¥–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞\n\nüê¥–†–µ—Ñ–µ—Ä–∞–ª—ã - —ç—Ç–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–∞–∂–Ω—ã–π —Ñ–∞–∫—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ª–∏—á–∞–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç –±–æ—Ç–∞.\n\n‚ùì–ï—Å—Ç—å –¥—Ä—É–∑—å—è? - –ø—Ä–∏–≥–ª–∞—à–∞–π –∏—Ö –∫ –Ω–∞–º.\n\nüîó–°—Å—ã–ª–∫–∞: {referral_link}"
    keyboard_markup = types.InlineKeyboardMarkup(row_width=1)
    button_back = types.InlineKeyboardButton("‚¨ÖÔ∏è", callback_data='back_to_main_menu')
    keyboard_markup.add(button_back)
    await callback_query.message.edit_text(text, parse_mode=ParseMode.MARKDOWN, reply_markup=keyboard_markup)

@dp.callback_query_handler(lambda query: query.data == 'army_button')
async def process_army_button(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    hut = user_huts[user_id]

    if hut is not None:
        text = f"üõñ–•–∏–∂–∏–Ω–∞ –ë–∞—Ä–æ–Ω–∞üå¨\n‚¨ÜÔ∏è–°—Ç–∞—Ç—É—Å —Ö–∏–∂–∏–Ω—ã: {hut['status']}\nüê¥–û—Å–Ω–æ–≤–∞—Ç–µ–ª—å: {hut['founder']}\nüîë–ö–æ–¥: {hut['code']}"
        keyboard_markup = types.InlineKeyboardMarkup(row_width=1)
        button1 = types.InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å üçé", callback_data='send_apple')
        button2 = types.InlineKeyboardButton("üö∂–í—ã–π—Ç–∏", callback_data='leave_hut')
        button3 = types.InlineKeyboardButton("‚¨ÖÔ∏è", callback_data='back_to_main_menu')
        keyboard_markup.add(button1, button2, button3)
        await callback_query.message.edit_text(text, parse_mode=ParseMode.MARKDOWN, reply_markup=keyboard_markup)
    else:
        await callback_query.answer("‚ùå–¢—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—à—å –≤ –∫–∞–∫–æ–π-–ª–∏–±–æ —Ö–∏–∂–∏–Ω–µ.", show_alert=True)

@dp.callback_query_handler(lambda query: query.data == 'send_apple')
async def process_send_apple(callback_query: types.CallbackQuery):
    await callback_query.answer("–Ø–±–ª–æ–∫–æ –•–∏–∂–∏–Ω–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æüçé")

@dp.callback_query_handler(lambda query: query.data == 'leave_hut')
async def process_leave_hut(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    user_huts[user_id] = None
    await callback_query.message.delete()
    await callback_query.message.answer("–°–æ–∑–¥–∞—Ç–µ–ª–µ–º —Ö–∏–∂–∏–Ω—ã —è–≤–ª—è–ª—Å—è —Å–∞–º –ë–∞—Ä–æ–Ω, —Ç–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–Ω–∏–∂–µ–Ω –¥–æ 0üîª", parse_mode=ParseMode.MARKDOWN)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
